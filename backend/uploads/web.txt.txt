const mongoose = require('mongoose');

const paragraphSchema = new mongoose.Schema({
  text: String,
});

const imageSchema = new mongoose.Schema({
  url: String,
});

const videoSchema = new mongoose.Schema({
  url: String,
});

const articleSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  paragraphs: [paragraphSchema],
  unorderedLists: [paragraphSchema],
  images: [imageSchema],
  videos: [videoSchema],
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model('Article', articleSchema);


const express = require('express');
const Article = require('./models/article');

const router = express.Router();

// Create new article
router.post('/', async (req, res) => {
  try {
    const article = new Article(req.body);
    await article.save();
    res.status(201).json(article);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Get all articles
router.get('/', async (req, res) => {
  try {
    const articles = await Article.find();
    res.json(articles);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get one article
router.get('/:id', getArticle, (req, res) => {
  res.json(res.article);
});

// Update article
router.patch('/:id', getArticle, async (req, res) => {
  if (req.body.title != null) {
    res.article.title = req.body.title;
  }
  if (req.body.paragraphs != null) {
    res.article.paragraphs = req.body.paragraphs;
  }
  if (req.body.unorderedLists != null) {
    res.article.unorderedLists = req.body.unorderedLists;
  }
  if (req.body.images != null) {
    res.article.images = req.body.images;
  }
  if (req.body.videos != null) {
    res.article.videos = req.body.videos;
  }
  try {
    const updatedArticle = await res.article.save();
    res.json(updatedArticle);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Delete article
router.delete('/:id', getArticle, async (req, res) => {
  try {
    await res.article.remove();
    res.json({ message: 'Deleted article' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Middleware to get article by ID
async function getArticle(req, res, next) {
  let article;
  try {
    article = await Article.findById(req.params.id);
    if (article == null) {
      return res.status(404).json({ message: 'Cannot find article' });
    }
  } catch (err) {
    return res.status(500).json({ message: err.message });
  }
  res.article = article;
  next();
}

module.exports = router;












const mongoose = require('mongoose');

const articleSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },
  image: {
    type: String,
    required: true,
  },
  profileImg: {
    type: String,
    required: true,
  },
  profileName: {
    type: String,
    required: true,
  },
  profileProfession: {
    type: String,
    required: true,
  },
  category: {
    type: String,
    required: true,
  },
}, { timestamps: true });

module.exports = mongoose.model('Article', articleSchema);










Articles 


router.get('/articles', async (ctx) => {
  const articles = await Article.find();
  ctx.body = articles;
});

router.get('/articles/:id', async (ctx) => {
  const article = await Article.findById(ctx.params.id);
  if (!article) {
    ctx.status = 404;
    ctx.body = { message: 'Article not found' };
    return;
  }
  ctx.body = article;
});

router.post('/articles', async (ctx) => {
  const article = new Article(ctx.request.body);
  try {
    await article.save();
    ctx.status = 201;
    ctx.body = article;
  } catch (err) {
    ctx.status = 400;
    ctx.body = { message: err.message };
  }
});

router.patch('/articles/:id', async (ctx) => {
  const article = await Article.findById(ctx.params.id);
  if (!article) {
    ctx.status = 404;
    ctx.body = { message: 'Article not found' };
    return;
  }
  Object.assign(article, ctx.request.body);
  try {
    await article.save();
    ctx.body = article;
  } catch (err) {
    ctx.status = 400;
    ctx.body = { message: err.message };
  }
});

router.delete('/articles/:id', async (ctx) => {
  const article = await Article.findById(ctx.params.id);
  if (!article) {
    ctx.status = 404;
    ctx.body = { message: 'Article not found' };
    return;
  }
  await article.remove();
  ctx.body = { message: 'Article deleted' };
});
 
const mongoose = require('mongoose');

const articleSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  image: { type: String, required: true },
  profileImg: { type: String, required: true },
  profileName: { type: String, required: true },
  profileProfession: { type: String, required: true },
  category: { type: String, required: true },
});

const Article = mongoose.model('Article', articleSchema);

module.exports = Article;



or 


Please make an api schema and api in koajs nodejs monggose  for articles fields are  title ,description,image  refrence User table and fields are ,profileImg profile Name Profile Profession  and ref category  with category table





const mongoose = require('mongoose');

const articleSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  image: {
    type: String,
    required: true
  },
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  category: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Category'
  }
});

const Article = mongoose.model('Article', articleSchema);

module.exports = Article;




// Create a new article
router.post('/articles', async (ctx) => {
  try {
    const { title, description, image, userId, categoryId } = ctx.request.body;
    const user = await User.findById(userId);
    const category = await Category.findById(categoryId);

    if (!user) {
      ctx.status = 400;
      ctx.body = { success: false, error: 'User not found' };
      return;
    }

    if (!category) {
      ctx.status = 400;
      ctx.body = { success: false, error: 'Category not found' };
      return;
    }

    const article = new Article({
      title,
      description,
      image,
      user: user._id,
      category: category._id,
    });

    await article.save();

    ctx.body = { success: true, data: article };
  } catch (err) {
    ctx.status = 500;
    ctx.body = { success: false, error: err.message };
  }
});

// Get all articles
router.get('/articles', async (ctx) => {
  try {
    const articles = await Article.find()
      .populate('user', 'profileImg profileName profileProfession')
      .populate('category', 'name')
      .exec();

    ctx.body = { success: true, data: articles };
  } catch (err) {
    ctx.status = 500;
    ctx.body = { success: false, error: err.message };
  }
});

// Get a single article
router.get('/articles/:id', async (ctx) => {
  try {
    const { id } = ctx.params;
    const article = await Article.findById(id)
      .populate('user', 'profileImg profileName profileProfession')
      .populate('category', 'name')
      .exec();

    if (!article) {
      ctx.status = 404;
      ctx.body = { success: false, error: 'Article not found' };
      return;
    }

    ctx.body = { success: true, data: article };
  } catch (err) {
    ctx.status = 500;
    ctx.body = { success: false, error: err.message };
  }
});


router.put('/articles/:id', async (ctx) => {
  try {
    const { id } = ctx.params;
    const { title, description, image, userId, categoryId } = ctx.request.body;
    const user = await User.findById(userId);
    const category = await Category.findById(categoryId);

    if (!user) {
      ctx.status = 400;
      ctx.body = { success: false, error: 'User not found' };
      return;
    }

    if (!category) {
      ctx.status = 400;
      ctx.body = { success: false, error: 'Category not found' };
      return;
    }

    const article = await Article.findByIdAndUpdate(
      id,
      { title, description, image, user: user._id, category: category._id },
      { new: true }
    );

    if (!article) {
      ctx.status = 404;
      ctx.body = { success: false, error: 'Article not found' };
      return;
    }

    ctx.body = { success: true, data: article };
  } catch (err) {
    ctx.status = 500;
    ctx.status = 500;
    ctx.body = { success: false, error: err.message };
  }
});

